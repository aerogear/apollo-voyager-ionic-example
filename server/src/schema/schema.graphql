## NOTE: This schema was generated by Graphback and should not be changed manually

"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

input BooleanInput {
  ne: Boolean
  eq: Boolean
}

"""
@model
@datasync
@crud(delete: false)
@crud(update: false)
"""
type Comment {
  _id: GraphbackObjectID!
  message: String!
  author: String!

  """@manyToOne(field: 'comments', key: 'noteId')"""
  note: Task

  """@index(name: 'Datasync_lastUpdatedAt')"""
  _lastUpdatedAt: GraphbackTimestamp
  _version: Int
}

type CommentDelta {
  _id: GraphbackObjectID!
  message: String!
  author: String!

  """@index(name: 'Datasync_lastUpdatedAt')"""
  _lastUpdatedAt: GraphbackTimestamp
  _version: Int
  _deleted: Boolean
}

type CommentDeltaList {
  items: [CommentDelta]!
  lastSync: GraphbackTimestamp!
  limit: Int
}

input CommentFilter {
  _id: GraphbackObjectIDInput
  message: StringInput
  author: StringInput
  noteId: GraphbackObjectIDInput
  and: [CommentFilter!]
  or: [CommentFilter!]
  not: CommentFilter
}

type CommentResultList {
  items: [Comment]!
  offset: Int
  limit: Int
  count: Int
}

input CommentSubscriptionFilter {
  and: [CommentSubscriptionFilter!]
  or: [CommentSubscriptionFilter!]
  not: CommentSubscriptionFilter
  _id: GraphbackObjectIDInput
  message: StringInput
  author: StringInput
}

input CreateCommentInput {
  _id: GraphbackObjectID
  message: String!
  author: String!
  noteId: GraphbackObjectID
}

input CreateTaskInput {
  _id: GraphbackObjectID
  title: String!
  description: String!
  status: TaskStatus
  type: String
  priority: Int
  public: Boolean
  startDate: GraphbackDateTime
  payload: GraphbackJSON
}

scalar GraphbackDateTime

input GraphbackDateTimeInput {
  ne: GraphbackDateTime
  eq: GraphbackDateTime
  le: GraphbackDateTime
  lt: GraphbackDateTime
  ge: GraphbackDateTime
  gt: GraphbackDateTime
  in: [GraphbackDateTime!]
  between: [GraphbackDateTime!]
}

scalar GraphbackJSON

scalar GraphbackObjectID

input GraphbackObjectIDInput {
  ne: GraphbackObjectID
  eq: GraphbackObjectID
  le: GraphbackObjectID
  lt: GraphbackObjectID
  ge: GraphbackObjectID
  gt: GraphbackObjectID
  in: [GraphbackObjectID!]
  between: [GraphbackObjectID!]
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar GraphbackTimestamp

input IntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  in: [Int!]
  between: [Int!]
}

input MutateCommentInput {
  _id: GraphbackObjectID!
  message: String
  author: String
  noteId: GraphbackObjectID
  _version: Int!
}

input MutateTaskInput {
  _id: GraphbackObjectID!
  title: String
  description: String
  status: TaskStatus
  type: String
  priority: Int
  public: Boolean
  startDate: GraphbackDateTime
  payload: GraphbackJSON
  _version: Int!
}

type Mutation {
  createTask(input: CreateTaskInput!): Task
  updateTask(input: MutateTaskInput!): Task
  deleteTask(input: MutateTaskInput!): Task
  createComment(input: CreateCommentInput!): Comment
  updateComment(input: MutateCommentInput!): Comment
  deleteComment(input: MutateCommentInput!): Comment
}

input OrderByInput {
  field: String!
  order: SortDirectionEnum = ASC
}

input PageRequest {
  limit: Int
  offset: Int
}

type Query {
  getTask(id: GraphbackObjectID!): Task
  findTasks(filter: TaskFilter, page: PageRequest, orderBy: OrderByInput): TaskResultList!
  getComment(id: GraphbackObjectID!): Comment
  findComments(filter: CommentFilter, page: PageRequest, orderBy: OrderByInput): CommentResultList!
  syncTasks(lastSync: GraphbackTimestamp!, filter: TaskFilter, limit: Int): TaskDeltaList!
  syncComments(lastSync: GraphbackTimestamp!, filter: CommentFilter, limit: Int): CommentDeltaList!
}

enum SortDirectionEnum {
  DESC
  ASC
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String!]
  contains: String
  startsWith: String
  endsWith: String
}

type Subscription {
  newTask(filter: TaskSubscriptionFilter): Task!
  updatedTask(filter: TaskSubscriptionFilter): Task!
  deletedTask(filter: TaskSubscriptionFilter): Task!
  newComment(filter: CommentSubscriptionFilter): Comment!
  updatedComment(filter: CommentSubscriptionFilter): Comment!
  deletedComment(filter: CommentSubscriptionFilter): Comment!
}

"""
@model
@datasync
"""
type Task {
  _id: GraphbackObjectID!
  title: String!
  description: String!
  status: TaskStatus
  type: String
  priority: Int
  public: Boolean
  startDate: GraphbackDateTime
  payload: GraphbackJSON

  """
  @oneToMany(field: 'note', key: 'noteId')
  @oneToMany(field: 'note')
  """
  comments(filter: CommentFilter): [Comment]!

  """@index(name: 'Datasync_lastUpdatedAt')"""
  _lastUpdatedAt: GraphbackTimestamp
  _version: Int
}

type TaskDelta {
  _id: GraphbackObjectID!
  title: String!
  description: String!
  status: TaskStatus
  type: String
  priority: Int
  public: Boolean
  startDate: GraphbackDateTime
  payload: GraphbackJSON

  """@index(name: 'Datasync_lastUpdatedAt')"""
  _lastUpdatedAt: GraphbackTimestamp
  _version: Int
  _deleted: Boolean
}

type TaskDeltaList {
  items: [TaskDelta]!
  lastSync: GraphbackTimestamp!
  limit: Int
}

input TaskFilter {
  _id: GraphbackObjectIDInput
  title: StringInput
  description: StringInput
  status: StringInput
  type: StringInput
  priority: IntInput
  public: BooleanInput
  startDate: GraphbackDateTimeInput
  and: [TaskFilter!]
  or: [TaskFilter!]
  not: TaskFilter
}

type TaskResultList {
  items: [Task]!
  offset: Int
  limit: Int
  count: Int
}

enum TaskStatus {
  OPEN
  ASSIGNED
  COMPLETE
}

input TaskSubscriptionFilter {
  and: [TaskSubscriptionFilter!]
  or: [TaskSubscriptionFilter!]
  not: TaskSubscriptionFilter
  _id: GraphbackObjectIDInput
  title: StringInput
  description: StringInput
  status: StringInput
  type: StringInput
  priority: IntInput
  public: BooleanInput
  startDate: GraphbackDateTimeInput
}