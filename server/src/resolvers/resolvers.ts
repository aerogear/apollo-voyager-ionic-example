/*
 * File generated by Graphback CRUD resolver plugin.
 * Content will be overwritten by Graphback generator.
 * To change implementation please disable generator options and supply your own implementation
 * outside generated file.
 */

import { models } from './models'
import { wrapResolversWithAuth } from './wrapResolversWithAuth'

const resolvers = {
  Query: {
    findTasks: (parent, args, context) => {
      const { fields, ...page } = args
      return context.Task.findBy(fields, page)
    },
    findAllTasks: (parent, args, context) => {
      return context.Task.findAll(args)
    }
  },

  Mutation: {
    createTask: (parent, args, context) => {
      return context.Task.create(args.input, context)
    },
    updateTask: (parent, args, context) => {
      return context.Task.update(args.input, context)
    },
    deleteTask: (parent, args, context) => {
      return context.Task.delete(args.input, context)
    }
  },

  Subscription: {
    newTask: {
      subscribe: (parent, args, context) => {
        return context.Task.subscribeToCreate(args, context)
      }
    },
    updatedTask: {
      subscribe: (parent, args, context) => {
        return context.Task.subscribeToUpdate(args, context)
      }
    },
    deletedTask: {
      subscribe: (parent, args, context) => {
        return context.Task.subscribeToDelete(args, context)
      }
    }
  }
}

// wrap the resolvers in a seamless way such that
// no extra code needs to be written by the user
// this would require a very small abount of codegen but I think 
// it's worth it.
export default wrapResolversWithAuth(resolvers, models) as any